class AuthorColorPickerElement extends AuthorBaseElement(HTMLElement) {
  constructor () {
    super(`{{TEMPLATE-STRING}}`)

    this.UTIL.defineProperties({
      defaultAxis: {
        private: true,
        readonly: true,
        default: '*'
      },

      handles: {
        private: true,
        readonly: true,
        get: () => this.querySelectorAll('author-slider-handle')
      },

      hue: {
        private: true,
        default: 0
      },

      saturation: {
        private: true,
        default: 0
      },

      value: {
        private: true,
        default: 100
      },

      alpha: {
        private: true,
        default: 100
      },

      canvas: {
        private: true,
        readonly: true,
        get: () => this.shadowRoot.querySelector('canvas')
      },

      context: {
        private: true,
        readonly: true,
        get: () => this.PRIVATE.canvas.getContext('2d')
      },

      position: {
        private: true,
        default: {
          x: 0,
          y: 0
        }
      },

      dimensions: {
        private: true,
        readonly: true,
        get: () => this.PRIVATE.canvas.getBoundingClientRect()
      },

      initialWidth: {
        private: true,
        default: 236
      },

      initialHeight: {
        private: true,
        default: 118
      }
    })

    this.UTIL.defineAttributes({
      axis: this.PRIVATE.defaultAxis
    })

    this.UTIL.definePrivateMethods({
      draw: (width = this.PRIVATE.dimensions.width, height = this.PRIVATE.dimensions.height, hue = this.PRIVATE.hue) => {
        let { canvas, context, HSVToRGB } = this.PRIVATE

        canvas.width = width
        canvas.height = height

        let rgb = HSVToRGB(hue, 100, 100)

        context.clearRect(0, 0, width, height)
        context.fillStyle = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`
				context.fillRect(0, 0, width, height)

        let gradient = {
          x: context.createLinearGradient(0, 0, width, 0),
          y: context.createLinearGradient(0, 0, 0, height)
        }

        gradient.x.addColorStop(0, 'rgba(255, 255, 255, 1)')
        gradient.x.addColorStop(1, 'rgba(255, 255, 255, 0)')

        context.fillStyle = gradient.x
        context.fillRect(0, 0, width, height)

        gradient.y.addColorStop(0, 'rgba(0, 0, 0, 0)')
        gradient.y.addColorStop(1, 'rgba(0, 0, 0, 1)')

        context.fillStyle = gradient.y
        context.fillRect(0, 0, width, height)
      },

      generateColorObject: (h = this.PRIVATE.hue, s = this.PRIVATE.saturation, v = this.PRIVATE.value) => {
        let { alpha, HSVToRGB } = this.PRIVATE

        let rgb = HSVToRGB(h, s, v)
        let r = rgb[0]
        let g = rgb[1]
        let b = rgb[2]

        return {
          r,
          g,
          b,
          a: alpha,
          hex: `#${this.PRIVATE.RGBToHex(...rgb)}`,
          rgba: `rgba(${rgb.join(',')},${alpha / 100})`
        }
      },

      generateCoordinates: (getX, getY) => {
        switch (this.axis) {
          case '*': return {
            x: getX(),
            y: getY()
          }

          case 'x': return {
            x: getX(),
            y: null
          }

          case 'y': return {
            x: null,
            y: getY()
          }

          default: return this.UTIL.throwError({
            message: !this.axis
              ? 'No axis specified'
              : `Invalid axis "${this.axis}"`
          })
        }
      },

      generatePositionObject: (position = this.PRIVATE.position) => this.PRIVATE.generateCoordinates(() => ({
        px: position.x,
        pct: this.UTIL.getPercentageDecimal(position.x, this.clientWidth)
      }), () => ({
        px: position.y,
        pct: this.UTIL.getPercentageDecimal(position.y, this.clientHeight)
      })),

      getRelativePosition: evt => {
        let { top, left, width, height } = this.PRIVATE.dimensions

        return this.PRIVATE.generateCoordinates(() => {
          return Math.min(Math.max(evt.pageX - left - pageXOffset, 0), width)
        }, () => {
          return Math.min(Math.max(evt.pageY - top - pageYOffset, 0), height)
        })
      },

      HSVToRGB: (h, s, v) => {
        let r, g, b, i, f, p, q, t

        h = Math.max(0, Math.min(360, h))
        s = Math.max(0, Math.min(100, s))
        v = Math.max(0, Math.min(100, v))

        s /= 100;
        v /= 100;

        if(s == 0) {
          r = g = b = v

          return [
            Math.round(r * 255),
            Math.round(g * 255),
            Math.round(b * 255)
          ]
        }

        h /= 60
        i = Math.floor(h)
        f = h - i
        p = v * (1 - s)
        q = v * (1 - s * f)
        t = v * (1 - s * (1 - f))

        switch(i) {
          case 0:
            r = v
            g = t
            b = p
            break

          case 1:
            r = q
            g = v
            b = p
            break

          case 2:
            r = p
            g = v
            b = t
            break

          case 3:
            r = p
            g = q
            b = v
            break

          case 4:
            r = t
            g = p
            b = v
            break

          default:
            r = v
            g = p
            b = q
        }

        return [
          Math.round(r * 255),
          Math.round(g * 255),
          Math.round(b * 255)
        ]
      },

      RGBToHex: (r, g, b) => {
        let { unitToHex } = this.PRIVATE
        return `${unitToHex(r)}${unitToHex(g)}${unitToHex(b)}`
      },

      unitToHex: unit => {
        let hex = Number(unit).toString(16)

        if (hex.length < 2) {
          hex = `0${hex}`
        }

        return hex.toUpperCase()
      },

      pointermoveHandler: evt => {
        if (evt.buttons < 1) {
          return
        }

        document.addEventListener('pointerup', this.PRIVATE.pointerupHandler)

        let { getPercentageDecimal } = this.UTIL
        let { generateColorObject, generatePositionObject, handles, position } = this.PRIVATE
        let relative = this.PRIVATE.getRelativePosition(evt)

        if ((!this.position.x || relative.x !== position.x) || (!this.position.y || relative.y !== position.y)) {
          this.PRIVATE.saturation = getPercentageDecimal(relative.x, this.clientWidth) * 100
          this.PRIVATE.value = 100 - (getPercentageDecimal(relative.y, this.clientHeight) * 100)
          this.PRIVATE.position = relative

          if (handles.length !== 0) {
            handles.item(0).position = this.position
          }

          this.emit('slide', {
            color: generateColorObject(),
            position: generatePositionObject()
          })
        }
      },

      pointerupHandler: evt => {
        let { generateColorObject, generatePositionObject, handles, pointermoveHandler, pointerupHandler } = this.PRIVATE
        let reposition = true

        // this.PRIVATE.previousColor = this.PRIVATE.selectedColor
        // this.PRIVATE.selectedColor = currentColor

        if (handles.length > 1) {
          reposition = false
        } else if (handles.length !== 0) {
          handles.item(0).position = generatePositionObject()
        }

        if (reposition) {
          this.emit('change', {
            // previous: this.previousColor,
            color: generateColorObject(),
            position: generatePositionObject()
          })
        }

        document.removeEventListener('pointermove', pointermoveHandler)
        document.removeEventListener('pointerup', pointerupHandler)
      }
    })

    this.UTIL.registerListeners(this, {
      'attribute.change': evt => {
        let { attribute, oldValue, newValue } = evt.detail

        if (newValue === oldValue) {
          return
        }

        let { defaultAxis, validAxisValues } = this.PRIVATE

        switch (attribute) {
          case 'axis':
            let arr = newValue.split(' ').filter(axis => validAxisValues.includes(axis))

            if (!arr.length) {
              this.setAttribute('axis', defaultAxis)

              return this.UTIL.throwError({
                message: `Invalid axis "${newValue}". Valid values include any combination of the following, separated by spaces: "${validAxisValues.join('", "')}"`
              })
            }

            break
        }
      },

      connected: () => {
        let { draw, initialWidth, initialHeight } = this.PRIVATE
        draw(initialWidth, initialHeight)
      },

      pointerenter: evt => {
        let { dimensions, draw, initialWidth, initialHeight } = this.PRIVATE

        if (initialWidth !== dimensions.width || initialHeight !== dimensions.height) {
          draw()
        }
      },

      pointerdown: evt => {
        this.PRIVATE.position = this.PRIVATE.getRelativePosition(evt)

        let { getPercentageDecimal } = this.UTIL
        let { generateColorObject, generatePositionObject, handles, HSVToRGB, hue, pointermoveHandler, position } = this.PRIVATE

        if (handles.length > 1) {
          return
        }

        this.PRIVATE.saturation = getPercentageDecimal(position.x, this.clientWidth) * 100
        this.PRIVATE.value = 100 - (getPercentageDecimal(position.y, this.clientHeight) * 100)

        if (handles.length !== 0) {
          handles.item(0).position = this.position
        }

        this.emit('change', {
          color: generateColorObject(),
          position: generatePositionObject()
        })

        document.addEventListener('pointermove', pointermoveHandler)
      }
    })
  }

  set hue (val) {
    val = Math.max(0, Math.min(360, val))
    this.PRIVATE.hue = val === 360 ? 0 : val
    this.PRIVATE.draw()
  }

  set saturation (val) {
    this.PRIVATE.saturation = Math.max(0, Math.min(100, val))
    console.log('REPOSITION TARGET')
  }

  set value (val) {
    this.PRIVATE.value = Math.max(0, Math.min(100, val))
    console.log('REPOSITION TARGET')
  }

  set hsv ({ h, s, v }) {
    console.log(h, s, v)
  }

  set lightness (val) {
    console.log(val);
  }

  set hsl ({ h, s, l }) {
    console.log(h, s, l)
  }

  set red (val) {
    console.log(val);
  }

  set g (val) {
    console.log(val);
  }

  set blue (val) {
    console.log(val);
  }

  set rgb ({ r, g, b }) {
    console.log(r, g, b)
  }

  get hex () {

  }

  set hex (val) {
    console.log(val);
  }

  set alpha (val) {
    console.log(val)
  }

  get position () {
    return this.PRIVATE.generatePositionObject()
  }

  // get previousColor () {
  //   return this.PRIVATE.generateColorObj(this.PRIVATE.previousColor)
  // }

  // get selectedColor () {
  //   return this.PRIVATE.HSVToRGB({
  //     h: this.PRIVATE.hue,
  //     s: this.UTIL.getPercentageDecimal(position.x, this.clientWidth) * 100,
  //     v: 100 - (this.UTIL.getPercentageDecimal(position.y, this.clientHeight) * 100)
  //   })
  //
  //   // return this.PRIVATE.generateColorObj(this.PRIVATE.selectedColor)
  // }

  // set selectedColor (color) {
  //   if (color.startsWith('#')) {
  //     return console.log('process hex')
  //   }
  //
  //   if (color.startsWith('rgb')) {
  //     return console.log('process rgb')
  //   }
  //
  //   if (color.startsWith('hsl')) {
  //     return console.log('process hsl')
  //   }
  // }
}

customElements.define('author-color-picker', AuthorColorPickerElement)

export default AuthorColorPickerElement
