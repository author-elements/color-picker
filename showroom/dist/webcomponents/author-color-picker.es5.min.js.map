{"version":3,"file":"author-color-picker.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorColorPickerElement extends AuthorSliderElement {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    // Override AuthorSliderElement defaults\n    this.PRIVATE.defaultAxis = '*'\n\n    this.PRIVATE.pointerupHandler = evt => {\n      let { generateColorObject, generatePositionObject, handles, pointermoveHandler, pointerupHandler } = this.PRIVATE\n      let reposition = true\n\n      // this.PRIVATE.previousColor = this.PRIVATE.selectedColor\n      // this.PRIVATE.selectedColor = currentColor\n\n      let position = null\n\n      if (handles.length > 1) {\n        reposition = false\n      } else if (handles.length !== 0) {\n        handles.item(0).position = position = generatePositionObject()\n      }\n\n      if (reposition) {\n        this.emit('change', {\n          // previous: this.previousColor,\n          color: generateColorObject(),\n          position: position || generatePositionObject()\n        })\n      }\n\n      document.removeEventListener('pointermove', pointermoveHandler)\n      document.removeEventListener('pointerup', pointerupHandler)\n    }\n\n    this.PRIVATE.pointermoveHandler = evt => {\n      if (evt.buttons < 1) {\n        return\n      }\n\n      document.addEventListener('pointerup', this.PRIVATE.pointerupHandler)\n\n      let { getPercentageDecimal } = this.UTIL\n      let { generateColorObject, generatePositionObject, handles, position } = this.PRIVATE\n      let relative = this.PRIVATE.getRelativePosition(evt)\n\n      if ((!this.position.x || relative.x !== position.x) || (!this.position.y || relative.y !== position.y)) {\n        this.PRIVATE.setColor(relative)\n        this.PRIVATE.position = relative\n\n        if (handles.length !== 0) {\n          handles.item(0).position = this.position\n        }\n\n        this.emit('slide', {\n          color: generateColorObject(),\n          position: generatePositionObject()\n        })\n      }\n    }\n\n    this.UTIL.defineProperties({\n      defaultMode: {\n        private: true,\n        readonly: true,\n        default: 'single-hue'\n      },\n\n      defaultOrientation: {\n        private: true,\n        readonly: true,\n        default: 'horizontal'\n      },\n\n      validModes: {\n        private: true,\n        readonly: true,\n        default: ['single-hue', 'all-hues', 'gradient']\n      },\n\n      hue: {\n        private: true,\n        default: 0\n      },\n\n      saturation: {\n        private: true,\n        default: 0\n      },\n\n      value: {\n        private: true,\n        default: 100\n      },\n\n      alpha: {\n        private: true,\n        default: 100\n      }\n    })\n\n    this.UTIL.defineAttributes({\n      mode: this.PRIVATE.defaultMode,\n      orientation: this.PRIVATE.defaultOrientation\n    })\n\n    this.UTIL.definePrivateMethods({\n      draw: () => {\n        let { handles, hue, HSVToRGB, saturation, value } = this.PRIVATE\n\n        switch (this.mode) {\n          case 'single-hue':\n            return this.UTIL.setStyleProperty('bgColorRule', 'background-color', `rgba(${HSVToRGB(hue, 100, 100).join(', ')}, 1)`)\n        }\n\n        if (handles.length === 1) {\n          handles.item(0).position = {\n            x: { pct: saturation / 100 },\n            y: { pct: 1 - (value / 100) }\n          }\n        }\n      },\n\n      generateColorObject: (h = this.PRIVATE.hue, s = this.PRIVATE.saturation, v = this.PRIVATE.value) => {\n        let { alpha, HSVToRGB } = this.PRIVATE\n\n        let rgb = HSVToRGB(h, s, v)\n        let r = rgb[0]\n        let g = rgb[1]\n        let b = rgb[2]\n\n        return {\n          hue: this.PRIVATE.hue,\n          saturation: this.PRIVATE.saturation,\n          value: this.PRIVATE.value,\n          r,\n          g,\n          b,\n          alpha,\n          hex: `#${this.PRIVATE.RGBToHex(...rgb)}`,\n          rgba: `rgba(${rgb.join(',')},${alpha / 100})`\n        }\n      },\n\n      hexToRGB: hex => {\n        let [ , short, long ] = String(hex).match(/^#?(?:([\\da-f]{3})[\\da-f]?|([\\da-f]{6})(?:[\\da-f]{2})?)$/i) || []\n        let rgb\n\n        if (short) {\n          return Array.from(short, s => Number.parseInt(s, 16)).map(n => (n << 4) | n)\n        }\n\n        let value = Number.parseInt(long, 16)\n        return [ value >> 16, value >> 8 & 0xFF, value & 0xFF ]\n      },\n\n      HSVToRGB: (h, s, v) => {\n        let r, g, b, i, f, p, q, t\n\n        h = Math.max(0, Math.min(360, h))\n        s = Math.max(0, Math.min(100, s))\n        v = Math.max(0, Math.min(100, v))\n\n        s /= 100;\n        v /= 100;\n\n        if(s == 0) {\n          r = g = b = v\n\n          return [\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255)\n          ]\n        }\n\n        h /= 60\n        i = Math.floor(h)\n        f = h - i\n        p = v * (1 - s)\n        q = v * (1 - s * f)\n        t = v * (1 - s * (1 - f))\n\n        switch(i) {\n          case 0:\n            r = v\n            g = t\n            b = p\n            break\n\n          case 1:\n            r = q\n            g = v\n            b = p\n            break\n\n          case 2:\n            r = p\n            g = v\n            b = t\n            break\n\n          case 3:\n            r = p\n            g = q\n            b = v\n            break\n\n          case 4:\n            r = t\n            g = p\n            b = v\n            break\n\n          default:\n            r = v\n            g = p\n            b = q\n        }\n\n        return [\n          Math.round(r * 255),\n          Math.round(g * 255),\n          Math.round(b * 255)\n        ]\n      },\n\n      /**\n       * Converts an RGB color value to HSV. Conversion formula\n       * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n       * Assumes r, g, and b are contained in the set [0, 255] and\n       * returns h, s, and v in the set [0, 1].\n       *\n       * @param   Number  r       The red color value\n       * @param   Number  g       The green color value\n       * @param   Number  b       The blue color value\n       * @return  Array           The HSV representation\n       */\n      RGBToHSV: (red, green, blue) => {\n        red /= 255\n        green /= 255\n        blue /= 255\n\n        let max = Math.max(red, green, blue)\n        let min = Math.min(red, green, blue)\n        let hue, saturation, value = max\n\n        let difference = max - min\n        saturation = max === 0 ? 0 : difference / max\n\n        if (max === min) {\n          hue = 0\n        } else {\n          switch (max) {\n            case red:\n              hue = (green - blue) / difference + (green < blue ? 6 : 0)\n              break\n\n            case green:\n              hue = (blue - red) / difference + 2\n              break\n\n            case blue:\n              hue = (red - green) / difference + 4\n              break\n          }\n\n          hue /= 6\n        }\n\n        return [hue, saturation, value]\n      },\n\n      RGBToHex: (r, g, b) => {\n        let { unitToHex } = this.PRIVATE\n        return `${unitToHex(r)}${unitToHex(g)}${unitToHex(b)}`\n      },\n\n      unitToHex: unit => {\n        let hex = Number(unit).toString(16)\n\n        if (hex.length < 2) {\n          hex = `0${hex}`\n        }\n\n        return hex.toUpperCase()\n      },\n\n      setColor: (position, percentage = false) => {\n        let { getPercentageDecimal } = this.UTIL\n\n        switch (this.mode) {\n          case 'single-hue':\n            this.PRIVATE.saturation = getPercentageDecimal(position.x, this.clientWidth) * 100\n            this.PRIVATE.value = 100 - (getPercentageDecimal(position.y, this.clientHeight) * 100)\n            break\n\n          case 'all-hues':\n            this.PRIVATE.hue = this.orientation === 'horizontal'\n              ? getPercentageDecimal(position.x, this.clientWidth) * 360\n              : getPercentageDecimal(position.y, this.clientHeight) * 360\n\n            this.PRIVATE.saturation = 100\n            this.PRIVATE.value = 100\n            break\n        }\n      },\n\n      setRGB: (r, g, b) => {\n        let { generateColorObject, generatePositionObject, handles, RGBToHSV } = this.PRIVATE\n        let hsv = RGBToHSV(r, g, b)\n\n        this.PRIVATE.hue = hsv[0] * 360\n        this.PRIVATE.saturation = hsv[1] * 100\n        this.PRIVATE.value = hsv[2] * 100\n\n        this.PRIVATE.draw()\n\n        this.emit('change', {\n          color: generateColorObject(),\n          position: generatePositionObject()\n        })\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      'attribute.change': evt => {\n        let { attribute, oldValue, newValue } = evt.detail\n\n        if (newValue === oldValue) {\n          return\n        }\n\n        let { defaultMode, validModes } = this.PRIVATE\n\n        switch (attribute) {\n          case 'mode':\n            let arr = newValue.split(' ').filter(axis => validModes.includes(axis))\n\n            if (!arr.length) {\n              this.setAttribute('mode', defaultMode)\n\n              return this.UTIL.throwError({\n                message: `Invalid mode \"${newValue}\". Valid values include: \"${validModes.join('\", \"')}\"`\n              })\n            }\n\n            break\n        }\n      },\n\n      connected: () => {\n        // Remove default author-slider pointerdown handler\n        this.removeEventListener('pointerdown', this.PRIVATE.pointerdownHandler)\n\n        // Reset AuthorSliderElement defaults\n        if (!this.hasAttribute('axis')) {\n          this.axis = this.PRIVATE.defaultAxis\n        }\n\n        this.UTIL.insertStyleRules({\n          bgColorRule: ':host {}'\n        })\n\n        this.PRIVATE.draw()\n      },\n\n      pointerdown: evt => {\n        this.PRIVATE.position = this.PRIVATE.getRelativePosition(evt)\n\n        let { getPercentageDecimal } = this.UTIL\n        let { generateColorObject, generatePositionObject, handles, HSVToRGB, hue, pointermoveHandler, position } = this.PRIVATE\n\n        if (handles.length > 1) {\n          return\n        }\n\n        this.PRIVATE.setColor(position)\n\n        if (handles.length !== 0) {\n          handles.item(0).position = this.position\n        }\n\n        this.emit('change', {\n          color: generateColorObject(),\n          position: generatePositionObject()\n        })\n\n        document.addEventListener('pointermove', pointermoveHandler)\n      }\n    })\n  }\n\n  static get observedAttributes () {\n    return [...AuthorSliderElement.observedAttributes, 'mode', 'orientation']\n  }\n\n  get hue () {\n    return this.PRIVATE.hue\n  }\n\n  set hue (val) {\n    val = Math.max(0, Math.min(360, val))\n    this.PRIVATE.hue = val === 360 ? 0 : val\n    this.PRIVATE.draw()\n\n    this.emit('change', {\n      color: this.PRIVATE.generateColorObject(),\n      position: this.PRIVATE.generatePositionObject()\n    })\n  }\n\n  // set saturation (val) {\n  //   this.PRIVATE.saturation = Math.max(0, Math.min(100, val))\n  //   console.log('REPOSITION TARGET')\n  // }\n\n  // set value (val) {\n  //   this.PRIVATE.value = Math.max(0, Math.min(100, val))\n  //   console.log('REPOSITION TARGET')\n  // }\n\n  // set hsv ({ h, s, v }) {\n  //   console.log(h, s, v)\n  // }\n\n  // set lightness (val) {\n  //   console.log(val);\n  // }\n\n  // set hsl ({ h, s, l }) {\n  //   console.log(h, s, l)\n  // }\n\n  // set red (val) {\n  //   console.log(val);\n  // }\n\n  // set g (val) {\n  //   console.log(val);\n  // }\n\n  // set blue (val) {\n  //   console.log(val);\n  // }\n\n  set rgb ({r = 0, g = 0, b = 0}) {\n    this.PRIVATE.setRGB(r, g, b)\n  }\n\n  // get hex () {\n  //\n  // }\n\n  set hex (val) {\n    this.PRIVATE.setRGB(...this.PRIVATE.hexToRGB(val))\n  }\n\n  // set alpha (val) {\n  //   console.log(val)\n  // }\n\n  get position () {\n    return this.PRIVATE.generatePositionObject()\n  }\n\n  // get previousColor () {\n  //   return this.PRIVATE.generateColorObj(this.PRIVATE.previousColor)\n  // }\n\n  get selectedColor () {\n    return this.PRIVATE.generateColorObject()\n  }\n\n  // set selectedColor (color) {\n  //   if (color.startsWith('#')) {\n  //     return console.log('process hex')\n  //   }\n  //\n  //   if (color.startsWith('rgb')) {\n  //     return console.log('process rgb')\n  //   }\n  //\n  //   if (color.startsWith('hsl')) {\n  //     return console.log('process hsl')\n  //   }\n  // }\n}\n\ncustomElements.define('author-color-picker', AuthorColorPickerElement)\n\nexport default AuthorColorPickerElement\n"],"names":["AuthorColorPickerElement","PRIVATE","defaultAxis","pointerupHandler","evt","_this","generateColorObject","generatePositionObject","handles","pointermoveHandler","reposition","position","length","item","emit","color","document","removeEventListener","buttons","addEventListener","UTIL","getPercentageDecimal","relative","getRelativePosition","x","y","setColor","defineProperties","defaultMode","private","readonly","default","defaultOrientation","validModes","hue","saturation","value","alpha","defineAttributes","mode","orientation","definePrivateMethods","draw","HSVToRGB","setStyleProperty","join","pct","h","s","v","rgb","r","g","b","hex","RGBToHex","rgba","hexToRGB","String","match","short","long","Array","from","Number","parseInt","map","n","i","f","p","q","t","Math","max","min","round","floor","RGBToHSV","red","green","blue","difference","unitToHex","unit","toString","toUpperCase","clientWidth","clientHeight","setRGB","hsv","registerListeners","detail","attribute","oldValue","newValue","split","filter","axis","includes","setAttribute","throwError","message","connected","pointerdownHandler","hasAttribute","insertStyleRules","bgColorRule","pointerdown","AuthorSliderElement","observedAttributes","this","val","customElements","define"],"mappings":"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"}