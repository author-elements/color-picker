{"version":3,"file":"author-color-picker.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorColorPickerElement extends AuthorSliderElement {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    // Override AuthorSliderElement defaults\n    this.PRIVATE.defaultAxis = '*'\n\n    this.PRIVATE.pointerupHandler = evt => {\n      let { generateColorObject, generatePositionObject, handles, pointermoveHandler, pointerupHandler } = this.PRIVATE\n      let reposition = true\n\n      // this.PRIVATE.previousColor = this.PRIVATE.selectedColor\n      // this.PRIVATE.selectedColor = currentColor\n\n      let position = null\n\n      if (handles.length > 1) {\n        reposition = false\n      } else if (handles.length !== 0) {\n        handles.item(0).position = position = generatePositionObject()\n      }\n\n      if (reposition) {\n        this.emit('change', {\n          // previous: this.previousColor,\n          color: generateColorObject(),\n          position: position || generatePositionObject()\n        })\n      }\n\n      document.removeEventListener('pointermove', pointermoveHandler)\n      document.removeEventListener('pointerup', pointerupHandler)\n    }\n\n    this.PRIVATE.pointermoveHandler = evt => {\n      if (evt.buttons < 1) {\n        return\n      }\n\n      document.addEventListener('pointerup', this.PRIVATE.pointerupHandler)\n\n      let { getPercentageDecimal } = this.UTIL\n      let { generateColorObject, generatePositionObject, handles, position } = this.PRIVATE\n      let relative = this.PRIVATE.getRelativePosition(evt)\n\n      if ((!this.position.x || relative.x !== position.x) || (!this.position.y || relative.y !== position.y)) {\n        this.PRIVATE.setColor(relative)\n        this.PRIVATE.position = relative\n\n        if (handles.length !== 0) {\n          handles.item(0).position = this.position\n        }\n\n        this.emit('slide', {\n          color: generateColorObject(),\n          position: generatePositionObject()\n        })\n      }\n    }\n\n    this.UTIL.defineProperties({\n      defaultMode: {\n        private: true,\n        readonly: true,\n        default: 'single-hue'\n      },\n\n      defaultOrientation: {\n        private: true,\n        readonly: true,\n        default: 'horizontal'\n      },\n\n      validModes: {\n        private: true,\n        readonly: true,\n        default: ['single-hue', 'all-hues', 'gradient']\n      },\n\n      hue: {\n        private: true,\n        default: 0\n      },\n\n      saturation: {\n        private: true,\n        default: 0\n      },\n\n      value: {\n        private: true,\n        default: 100\n      },\n\n      alpha: {\n        private: true,\n        default: 100\n      },\n\n      canvas: {\n        private: true,\n        readonly: true,\n        get: () => this.shadowRoot.querySelector('canvas')\n      },\n\n      context: {\n        private: true,\n        readonly: true,\n        get: () => this.PRIVATE.canvas.getContext('2d')\n      },\n\n      initialWidth: {\n        private: true,\n        default: 236\n      },\n\n      initialHeight: {\n        private: true,\n        default: 118\n      }\n    })\n\n    this.UTIL.defineAttributes({\n      mode: this.PRIVATE.defaultMode,\n      orientation: this.PRIVATE.defaultOrientation\n    })\n\n    this.UTIL.definePrivateMethods({\n      drawSingleHueSpectrum: (hue, width, height) => {\n        let { context, HSVToRGB } = this.PRIVATE\n        let rgb = HSVToRGB(hue, 100, 100)\n\n        context.clearRect(0, 0, width, height)\n        context.fillStyle = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`\n\t\t\t\tcontext.fillRect(0, 0, width, height)\n\n        let gradient = {\n          x: context.createLinearGradient(0, 0, width, 0),\n          y: context.createLinearGradient(0, 0, 0, height)\n        }\n\n        gradient.x.addColorStop(0, 'rgba(255, 255, 255, 1)')\n        gradient.x.addColorStop(1, 'rgba(255, 255, 255, 0)')\n\n        context.fillStyle = gradient.x\n        context.fillRect(0, 0, width, height)\n\n        gradient.y.addColorStop(0, 'rgba(0, 0, 0, 0)')\n        gradient.y.addColorStop(1, 'rgba(0, 0, 0, 1)')\n\n        context.fillStyle = gradient.y\n        context.fillRect(0, 0, width, height)\n      },\n\n      drawAllHueSpectrum: (width, height, orientation = 'horizontal') => {\n        let { context } = this.PRIVATE\n\n        // this.PRIVATE.hue = 0\n\n        let args = orientation === 'horizontal'\n          ? [0, 0, width, 0]\n          : [0, 0, 0, height]\n\n        let gradient = context.createLinearGradient(...args)\n\n        gradient.addColorStop(0 / 6, '#F00')\n        gradient.addColorStop(1 / 6, '#FF0')\n        gradient.addColorStop(2 / 6, '#0F0')\n        gradient.addColorStop(3 / 6, '#0FF')\n        gradient.addColorStop(4 / 6, '#00F')\n        gradient.addColorStop(5 / 6, '#F0F')\n        gradient.addColorStop(6 / 6, '#F00')\n\n        context.fillStyle = gradient\n        context.fillRect(0, 0, width, height)\n      },\n\n      draw: (width = this.clientWidth, height = this.clientHeight, hue = this.PRIVATE.hue) => {\n        let { canvas, drawAllHueSpectrum, drawSingleHueSpectrum } = this.PRIVATE\n\n        canvas.width = width\n        canvas.height = height\n\n        switch (this.mode) {\n          case 'single-hue': return drawSingleHueSpectrum(hue, width, height)\n          case 'all-hues': return drawAllHueSpectrum(width, height)\n\n          default: this.UTIL.throwError({\n            message: `Invalid mode \"${this.mode}\"`\n          })\n        }\n      },\n\n      generateColorObject: (h = this.PRIVATE.hue, s = this.PRIVATE.saturation, v = this.PRIVATE.value) => {\n        let { alpha, HSVToRGB } = this.PRIVATE\n\n        let rgb = HSVToRGB(h, s, v)\n        let r = rgb[0]\n        let g = rgb[1]\n        let b = rgb[2]\n\n        return {\n          r,\n          g,\n          b,\n          a: alpha,\n          hex: `#${this.PRIVATE.RGBToHex(...rgb)}`,\n          rgba: `rgba(${rgb.join(',')},${alpha / 100})`\n        }\n      },\n\n      HSVToRGB: (h, s, v) => {\n        let r, g, b, i, f, p, q, t\n\n        h = Math.max(0, Math.min(360, h))\n        s = Math.max(0, Math.min(100, s))\n        v = Math.max(0, Math.min(100, v))\n\n        s /= 100;\n        v /= 100;\n\n        if(s == 0) {\n          r = g = b = v\n\n          return [\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255)\n          ]\n        }\n\n        h /= 60\n        i = Math.floor(h)\n        f = h - i\n        p = v * (1 - s)\n        q = v * (1 - s * f)\n        t = v * (1 - s * (1 - f))\n\n        switch(i) {\n          case 0:\n            r = v\n            g = t\n            b = p\n            break\n\n          case 1:\n            r = q\n            g = v\n            b = p\n            break\n\n          case 2:\n            r = p\n            g = v\n            b = t\n            break\n\n          case 3:\n            r = p\n            g = q\n            b = v\n            break\n\n          case 4:\n            r = t\n            g = p\n            b = v\n            break\n\n          default:\n            r = v\n            g = p\n            b = q\n        }\n\n        return [\n          Math.round(r * 255),\n          Math.round(g * 255),\n          Math.round(b * 255)\n        ]\n      },\n\n      /**\n       * Converts an RGB color value to HSV. Conversion formula\n       * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n       * Assumes r, g, and b are contained in the set [0, 255] and\n       * returns h, s, and v in the set [0, 1].\n       *\n       * @param   Number  r       The red color value\n       * @param   Number  g       The green color value\n       * @param   Number  b       The blue color value\n       * @return  Array           The HSV representation\n       */\n      RGBToHSV: (red, green, blue) => {\n        red /= 255\n        green /= 255\n        blue /= 255\n\n        let max = Math.max(red, green, blue)\n        let min = Math.min(red, green, blue)\n        let hue, saturation, value = max\n\n        let difference = max - min\n        saturation = max === 0 ? 0 : difference / max\n\n        if (max === min) {\n          hue = 0\n        } else {\n          switch (max) {\n            case red:\n              hue = (green - blue) / difference + (green < blue ? 6 : 0)\n              break\n\n            case green:\n              hue = (blue - red) / difference + 2\n              break\n\n            case blue:\n              hue = (red - green) / difference + 4\n              break\n          }\n\n          hue /= 6\n        }\n\n        return [hue, saturation, value]\n      },\n\n      RGBToHex: (r, g, b) => {\n        let { unitToHex } = this.PRIVATE\n        return `${unitToHex(r)}${unitToHex(g)}${unitToHex(b)}`\n      },\n\n      unitToHex: unit => {\n        let hex = Number(unit).toString(16)\n\n        if (hex.length < 2) {\n          hex = `0${hex}`\n        }\n\n        return hex.toUpperCase()\n      },\n\n      setColor: (position, percentage = false) => {\n        let { getPercentageDecimal } = this.UTIL\n\n        switch (this.mode) {\n          case 'single-hue':\n            this.PRIVATE.saturation = getPercentageDecimal(position.x, this.clientWidth) * 100\n            this.PRIVATE.value = 100 - (getPercentageDecimal(position.y, this.clientHeight) * 100)\n            break\n\n          case 'all-hues':\n            this.PRIVATE.hue = this.orientation === 'horizontal'\n              ? getPercentageDecimal(position.x, this.clientWidth) * 360\n              : getPercentageDecimal(position.y, this.clientHeight) * 360\n\n            this.PRIVATE.saturation = 100\n            this.PRIVATE.value = 100\n            break\n        }\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      'attribute.change': evt => {\n        let { attribute, oldValue, newValue } = evt.detail\n\n        if (newValue === oldValue) {\n          return\n        }\n\n        let { defaultMode, validModes } = this.PRIVATE\n\n        switch (attribute) {\n          case 'mode':\n            let arr = newValue.split(' ').filter(axis => validModes.includes(axis))\n\n            if (!arr.length) {\n              this.setAttribute('mode', defaultMode)\n\n              return this.UTIL.throwError({\n                message: `Invalid mode \"${newValue}\". Valid values include: \"${validModes.join('\", \"')}\"`\n              })\n            }\n\n            break\n        }\n      },\n\n      connected: () => {\n        // Reset AuthorSliderElement defaults\n        if (!this.hasAttribute('axis')) {\n          this.axis = this.PRIVATE.defaultAxis\n        }\n\n        this.removeEventListener('pointerdown', this.PRIVATE.pointerdownHandler)\n\n        let { draw, initialWidth, initialHeight } = this.PRIVATE\n        draw(initialWidth, initialHeight)\n      },\n\n      // pointerenter: evt => {\n      //   let { draw, initialWidth, initialHeight } = this.PRIVATE\n      //\n      //   if (initialWidth !== this.clientWidth || initialHeight !== this.clientHeight) {\n      //     draw()\n      //   }\n      // },\n\n      pointerdown: evt => {\n        this.PRIVATE.position = this.PRIVATE.getRelativePosition(evt)\n\n        let { getPercentageDecimal } = this.UTIL\n        let { generateColorObject, generatePositionObject, handles, HSVToRGB, hue, pointermoveHandler, position } = this.PRIVATE\n\n        if (handles.length > 1) {\n          return\n        }\n\n        this.PRIVATE.setColor(position)\n\n        if (handles.length !== 0) {\n          handles.item(0).position = this.position\n        }\n\n        this.emit('change', {\n          color: generateColorObject(),\n          position: generatePositionObject()\n        })\n\n        document.addEventListener('pointermove', pointermoveHandler)\n      }\n    })\n  }\n\n  static get observedAttributes () {\n    return [...AuthorSliderElement.observedAttributes, 'mode', 'orientation']\n  }\n\n  get hue () {\n    return this.PRIVATE.hue\n  }\n\n  set hue (val) {\n    val = Math.max(0, Math.min(360, val))\n    this.PRIVATE.hue = val === 360 ? 0 : val\n    this.PRIVATE.draw()\n\n    this.emit('change', {\n      color: this.PRIVATE.generateColorObject(),\n      position: this.PRIVATE.generatePositionObject()\n    })\n  }\n\n  // set saturation (val) {\n  //   this.PRIVATE.saturation = Math.max(0, Math.min(100, val))\n  //   console.log('REPOSITION TARGET')\n  // }\n\n  // set value (val) {\n  //   this.PRIVATE.value = Math.max(0, Math.min(100, val))\n  //   console.log('REPOSITION TARGET')\n  // }\n\n  // set hsv ({ h, s, v }) {\n  //   console.log(h, s, v)\n  // }\n\n  // set lightness (val) {\n  //   console.log(val);\n  // }\n\n  // set hsl ({ h, s, l }) {\n  //   console.log(h, s, l)\n  // }\n\n  // set red (val) {\n  //   console.log(val);\n  // }\n\n  // set g (val) {\n  //   console.log(val);\n  // }\n\n  // set blue (val) {\n  //   console.log(val);\n  // }\n\n  set rgb ({r, g, b}) {\n    let {\n      generateColorObject,\n      generatePositionObject,\n      handles,\n      RGBToHSV,\n      setColor\n    } = this.PRIVATE\n\n    let hsv = RGBToHSV(r, g, b)\n\n    this.PRIVATE.hue = hsv[0] * 360\n    this.PRIVATE.saturation = hsv[1] * 100\n    this.PRIVATE.value = hsv[2] * 100\n\n    this.PRIVATE.draw()\n\n    if (handles.length === 1) {\n      handles.item(0).position = {\n        x: { pct: hsv[1] },\n        y: { pct: 1 - hsv[2] }\n      }\n    }\n\n    this.emit('change', {\n      color: generateColorObject(),\n      position: generatePositionObject()\n    })\n  }\n\n  // get hex () {\n  //\n  // }\n\n  // set hex (val) {\n  //   console.log(val);\n  // }\n\n  // set alpha (val) {\n  //   console.log(val)\n  // }\n\n  get position () {\n    return this.PRIVATE.generatePositionObject()\n  }\n\n  // get previousColor () {\n  //   return this.PRIVATE.generateColorObj(this.PRIVATE.previousColor)\n  // }\n\n  get selectedColor () {\n    return this.PRIVATE.generateColorObject()\n  }\n\n  // set selectedColor (color) {\n  //   if (color.startsWith('#')) {\n  //     return console.log('process hex')\n  //   }\n  //\n  //   if (color.startsWith('rgb')) {\n  //     return console.log('process rgb')\n  //   }\n  //\n  //   if (color.startsWith('hsl')) {\n  //     return console.log('process hsl')\n  //   }\n  // }\n}\n\ncustomElements.define('author-color-picker', AuthorColorPickerElement)\n\nexport default AuthorColorPickerElement\n"],"names":["AuthorColorPickerElement","PRIVATE","defaultAxis","pointerupHandler","evt","_this","generateColorObject","generatePositionObject","handles","pointermoveHandler","reposition","position","length","item","emit","color","document","removeEventListener","buttons","addEventListener","UTIL","getPercentageDecimal","relative","getRelativePosition","x","y","setColor","defineProperties","defaultMode","private","readonly","default","defaultOrientation","validModes","hue","saturation","value","alpha","canvas","get","shadowRoot","querySelector","context","getContext","initialWidth","initialHeight","defineAttributes","mode","orientation","definePrivateMethods","drawSingleHueSpectrum","width","height","rgb","HSVToRGB","clearRect","fillStyle","fillRect","gradient","createLinearGradient","addColorStop","drawAllHueSpectrum","args","draw","clientWidth","clientHeight","throwError","message","h","s","v","r","g","b","a","hex","RGBToHex","rgba","join","i","f","p","q","t","Math","max","min","round","floor","RGBToHSV","red","green","blue","difference","unitToHex","unit","Number","toString","toUpperCase","registerListeners","detail","attribute","oldValue","newValue","split","filter","axis","includes","setAttribute","connected","hasAttribute","pointerdownHandler","pointerdown","AuthorSliderElement","observedAttributes","this","val","hsv","pct","customElements","define"],"mappings":"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"}